(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>s});var a=e(537),o=e.n(a),i=e(645),r=e.n(i)()(o());r.push([t.id,"*,\n*::after,\n*::before {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nbody {\n  background-color: rgb(206, 195, 180); \n  color: rgb(37, 34, 34);\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  line-height: 1.6;\n}\n\nbutton,\ninput {\n  border: none;\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  outline: none;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n}\n\ni {\n  margin-right: 10px;\n}\n\n/* Header */\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px;\n  background-color: rgba(0, 0, 0, 0.781);\n  color: antiquewhite;\n}\n\n.applogo {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.open-nav-button {\n  display: none;\n  width: 40px;\n  padding: 0;\n  background-color: darkgray;\n  font-size: 40px;\n}\n\n.button-open-nav i {\n  margin-right: 0;\n}\n\n.applogo img{\n  padding: 10px;\n}\n\n.applogo h1{\n  color: antiquewhite;\n  font-size: 30px;\n}\n\n\n\n/* main */\n\n.main {\n  display: flex;\n  min-height: calc(100vh - 104px - 48px);\n}\n\n\n.nav {\n  width: 300px;\n  min-width: 250px;\n  padding: 20px;\n  background-color: white;\n}\n\n.nav.active {\n  display: block;\n}\n\n\n.default-project-button {\n  background-color:white;\n  text-align: left;\n}\n\n.projects-title {\n  padding: 10px;\n  margin-top: 30px;\n}\n\n.button-project {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: white;\n  text-align: left;\n  margin-bottom: 10px;\n}\n\n\n.add-project-button {\n  margin-top: 10px;\n  margin-left: 2px;\n  background-color: white;\n  text-align: left;\n}\n\n.add-project-button.active{\n  display: none;\n}\n\n\n.button-project.active,\n.default-project-button.active {\n  background-color:rgba(0, 0, 0, 0.795);\n  font-weight: bold;\n  color: whitesmoke;\n}\n\n.button-project:hover,\n.default-project-button:hover,\n.add-project-button:hover {\n  background-color: rgba(0, 0, 0, 0.795);\n  color: whitesmoke;\n}\n\n.right-project-panel {\n  visibility: hidden;\n}\n\n.button-project:hover .right-project-panel {\n  visibility: visible;\n}\n\n.fa-times {\n  margin-right: 0;\n}\n\n.add-project-bar {\n  display: none;\n  width: 100%;\n  padding: 10px;\n  text-align: center;\n}\n\n.add-project-bar.active {\n  display: block;\n}\n\n.input-add-project-bar {\n  border: 1px solid #aaa;\n  margin-bottom: 10px;\n}\n\n.add-project-bar-buttons {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 20px;\n}\n\n.button-add-project-bar {\n  border: 1px solid #99dd99;\n  background-color: #aaffaa;\n  font-weight: bold;\n}\n\n.button-cancel-project-bar {\n  border: 1px solid #eeadad;\n  background-color: #ffbebe;\n  font-weight: bold;\n}\n\n\n.button-add-project-bar:hover {\n  background-color: #a6f0a6;\n}\n\n.button-cancel-project-bar:hover {\n  background-color: #f5b2b2;\n}\n\n.project-board {\n  width: 900px;\n  padding: 20px;\n  margin: 0 auto;\n}\n\n.project-board h1 {\n  padding: 0 10px;\n  margin-bottom: 10px;\n  font-size: 30px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\n.button-add-task {\n  width: 50%;\n  background-color: inherit;\n  text-align: left;\n}\n\n.add-task-popup {\n  display: none;\n}\n\n.add-task-popup.active {\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\nlabel{\n  margin-bottom: 5px;\n  margin-top: 5px;\n}\n\n\n\n.priority-select {\n  width: 100%;\n  height: auto;\n  font-size: 15px;\n}\n\ntextarea {\n  width: 100%;\n  margin-bottom: 10px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  font-size: 20px;\n}\n\n\n.add-task-popup-buttons {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  gap: 20px;\n}\n\n\n.button-add-task-popup {\n  background-color: #66e766;\n  font-weight: bold;\n}\n\n.button-cancel-task-popup {\n  background-color: #e45050;\n  font-weight: bold;\n}\n\n\n.button-task {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  cursor: default;\n  background-color: whitesmoke;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-style: italic;\n}\n\n.button-task:hover {\n  background-color: rgb(211, 211, 211);\n}\n\n.left-task-panel {\n  display: flex;\n  align-items: center;\n}\n\n.fa-circle {\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.task-content {\n  cursor: pointer;\n}\n\n.task-content.active {\n  display: none;\n}\n\n.input-task-name {\n  display: none;\n  height: 24px;\n  padding: 5px;\n  border: 1px solid #555;\n  background-color: white;\n  color: inherit;\n  font-family: inherit;\n}\n\n.input-task-name.active {\n  display: block;\n}\n\n.middle-task-panel{\n  display: flex;\n  align-items: center;\n}\n\n.task-level {\n  cursor: pointer;\n}\n\n.task-level.active {\n  display: none;\n}\n\n.priority {\n  display: none;\n}\n\n.priority.active {\n  display: block;\n}\n\n.right-task-panel {\n  display: flex;\n  align-items: center;\n}\n\n.due-date {\n  margin-right: 10px;\n  cursor: pointer;\n}\n\n.due-date.active {\n  display: none;\n}\n\n.input-due-date {\n  display: none;\n  height: 24px;\n  padding: 5px;\n  border: 1px solid #555;\n  margin: 0 10px;\n  background-color: white;\n  color: inherit;\n  font-family: inherit;\n}\n\n\n.input-due-date.active {\n  display: block;\n}\n\n.button-task .right-task-panel i {\n  visibility: hidden;\n  cursor: pointer;\n}\n\n.button-task:hover .right-task-panel i {\n  visibility: visible;\n}\n\n\n\n.description {\n  display: none;\n  border: 1px solid antiquewhite;\n  background-color: rgb(136, 179, 149);\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.description.active {\n  display: flex; \n  align-items: center;\n  justify-content: space-between;\n}\n\n\n.description-content {\n  display: block;\n}\n\n.description-content.active {\n  display: none;\n}\n\n\n.input-description {\n  display: none;\n}\n\n.input-description.active {\n  display: block;\n}\n\n.description i {\n  visibility: hidden;\n}\n\n.description:hover i {\n  visibility: visible;\n}\n\n.description i.active {\n  display: none;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["*,\n*::after,\n*::before {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nbody {\n  background-color: rgb(206, 195, 180); \n  color: rgb(37, 34, 34);\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  line-height: 1.6;\n}\n\nbutton,\ninput {\n  border: none;\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  outline: none;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n}\n\ni {\n  margin-right: 10px;\n}\n\n/* Header */\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px;\n  background-color: rgba(0, 0, 0, 0.781);\n  color: antiquewhite;\n}\n\n.applogo {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.open-nav-button {\n  display: none;\n  width: 40px;\n  padding: 0;\n  background-color: darkgray;\n  font-size: 40px;\n}\n\n.button-open-nav i {\n  margin-right: 0;\n}\n\n.applogo img{\n  padding: 10px;\n}\n\n.applogo h1{\n  color: antiquewhite;\n  font-size: 30px;\n}\n\n\n\n/* main */\n\n.main {\n  display: flex;\n  min-height: calc(100vh - 104px - 48px);\n}\n\n\n.nav {\n  width: 300px;\n  min-width: 250px;\n  padding: 20px;\n  background-color: white;\n}\n\n.nav.active {\n  display: block;\n}\n\n\n.default-project-button {\n  background-color:white;\n  text-align: left;\n}\n\n.projects-title {\n  padding: 10px;\n  margin-top: 30px;\n}\n\n.button-project {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: white;\n  text-align: left;\n  margin-bottom: 10px;\n}\n\n\n.add-project-button {\n  margin-top: 10px;\n  margin-left: 2px;\n  background-color: white;\n  text-align: left;\n}\n\n.add-project-button.active{\n  display: none;\n}\n\n\n.button-project.active,\n.default-project-button.active {\n  background-color:rgba(0, 0, 0, 0.795);\n  font-weight: bold;\n  color: whitesmoke;\n}\n\n.button-project:hover,\n.default-project-button:hover,\n.add-project-button:hover {\n  background-color: rgba(0, 0, 0, 0.795);\n  color: whitesmoke;\n}\n\n.right-project-panel {\n  visibility: hidden;\n}\n\n.button-project:hover .right-project-panel {\n  visibility: visible;\n}\n\n.fa-times {\n  margin-right: 0;\n}\n\n.add-project-bar {\n  display: none;\n  width: 100%;\n  padding: 10px;\n  text-align: center;\n}\n\n.add-project-bar.active {\n  display: block;\n}\n\n.input-add-project-bar {\n  border: 1px solid #aaa;\n  margin-bottom: 10px;\n}\n\n.add-project-bar-buttons {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 20px;\n}\n\n.button-add-project-bar {\n  border: 1px solid #99dd99;\n  background-color: #aaffaa;\n  font-weight: bold;\n}\n\n.button-cancel-project-bar {\n  border: 1px solid #eeadad;\n  background-color: #ffbebe;\n  font-weight: bold;\n}\n\n\n.button-add-project-bar:hover {\n  background-color: #a6f0a6;\n}\n\n.button-cancel-project-bar:hover {\n  background-color: #f5b2b2;\n}\n\n.project-board {\n  width: 900px;\n  padding: 20px;\n  margin: 0 auto;\n}\n\n.project-board h1 {\n  padding: 0 10px;\n  margin-bottom: 10px;\n  font-size: 30px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\n.button-add-task {\n  width: 50%;\n  background-color: inherit;\n  text-align: left;\n}\n\n.add-task-popup {\n  display: none;\n}\n\n.add-task-popup.active {\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\nlabel{\n  margin-bottom: 5px;\n  margin-top: 5px;\n}\n\n\n\n.priority-select {\n  width: 100%;\n  height: auto;\n  font-size: 15px;\n}\n\ntextarea {\n  width: 100%;\n  margin-bottom: 10px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  font-size: 20px;\n}\n\n\n.add-task-popup-buttons {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  gap: 20px;\n}\n\n\n.button-add-task-popup {\n  background-color: #66e766;\n  font-weight: bold;\n}\n\n.button-cancel-task-popup {\n  background-color: #e45050;\n  font-weight: bold;\n}\n\n\n.button-task {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  cursor: default;\n  background-color: whitesmoke;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-style: italic;\n}\n\n.button-task:hover {\n  background-color: rgb(211, 211, 211);\n}\n\n.left-task-panel {\n  display: flex;\n  align-items: center;\n}\n\n.fa-circle {\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.task-content {\n  cursor: pointer;\n}\n\n.task-content.active {\n  display: none;\n}\n\n.input-task-name {\n  display: none;\n  height: 24px;\n  padding: 5px;\n  border: 1px solid #555;\n  background-color: white;\n  color: inherit;\n  font-family: inherit;\n}\n\n.input-task-name.active {\n  display: block;\n}\n\n.middle-task-panel{\n  display: flex;\n  align-items: center;\n}\n\n.task-level {\n  cursor: pointer;\n}\n\n.task-level.active {\n  display: none;\n}\n\n.priority {\n  display: none;\n}\n\n.priority.active {\n  display: block;\n}\n\n.right-task-panel {\n  display: flex;\n  align-items: center;\n}\n\n.due-date {\n  margin-right: 10px;\n  cursor: pointer;\n}\n\n.due-date.active {\n  display: none;\n}\n\n.input-due-date {\n  display: none;\n  height: 24px;\n  padding: 5px;\n  border: 1px solid #555;\n  margin: 0 10px;\n  background-color: white;\n  color: inherit;\n  font-family: inherit;\n}\n\n\n.input-due-date.active {\n  display: block;\n}\n\n.button-task .right-task-panel i {\n  visibility: hidden;\n  cursor: pointer;\n}\n\n.button-task:hover .right-task-panel i {\n  visibility: visible;\n}\n\n\n\n.description {\n  display: none;\n  border: 1px solid antiquewhite;\n  background-color: rgb(136, 179, 149);\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.description.active {\n  display: flex; \n  align-items: center;\n  justify-content: space-between;\n}\n\n\n.description-content {\n  display: block;\n}\n\n.description-content.active {\n  display: none;\n}\n\n\n.input-description {\n  display: none;\n}\n\n.input-description.active {\n  display: block;\n}\n\n.description i {\n  visibility: hidden;\n}\n\n.description:hover i {\n  visibility: visible;\n}\n\n.description i.active {\n  display: none;\n}"],sourceRoot:""}]);const s=r},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",a=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),a&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),a&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,a,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(r[c]=!0)}for(var d=0;d<t.length;d++){var l=[].concat(t[d]);a&&r[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,a=0;a<n.length;a++)if(n[a].identifier===t){e=a;break}return e}function a(t,a){for(var i={},r=[],s=0;s<t.length;s++){var c=t[s],d=a.base?c[0]+a.base:c[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var A=e(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var h=o(p,a);a.byIndex=s,n.splice(s,0,{identifier:u,updater:h,references:1})}r.push(u)}return r}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=a(t=t||[],o=o||{});return function(t){t=t||[];for(var r=0;r<i.length;r++){var s=e(i[r]);n[s].references--}for(var c=a(t,o),d=0;d<i.length;d++){var l=e(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var a=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,o&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(a,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(a){var o=n[a];if(void 0!==o)return o.exports;var i=n[a]={id:a,exports:{}};return t[a](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),a=e(795),o=e.n(a),i=e(569),r=e.n(i),s=e(565),c=e.n(s),d=e(216),l=e.n(d),u=e(589),A=e.n(u),p=e(426),h={};function m(t,n){if(n.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+n.length+" present")}function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function f(t){return m(1,arguments),t instanceof Date||"object"===g(t)&&"[object Date]"===Object.prototype.toString.call(t)}function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function v(t){m(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===b(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function E(t){if(m(1,arguments),!f(t)&&"number"!=typeof t)return!1;var n=v(t);return!isNaN(Number(n))}function y(t){if(null===t||!0===t||!1===t)return NaN;var n=Number(t);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function C(t,n){m(2,arguments);var e=v(t).getTime(),a=y(n);return new Date(e+a)}function k(t,n){m(2,arguments);var e=y(n);return C(t,-e)}h.styleTagTransform=A(),h.setAttributes=c(),h.insert=r().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var B=864e5;function w(t){m(1,arguments);var n=1,e=v(t),a=e.getUTCDay(),o=(a<n?7:0)+a-n;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function x(t){m(1,arguments);var n=v(t),e=n.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(e+1,0,4),a.setUTCHours(0,0,0,0);var o=w(a),i=new Date(0);i.setUTCFullYear(e,0,4),i.setUTCHours(0,0,0,0);var r=w(i);return n.getTime()>=o.getTime()?e+1:n.getTime()>=r.getTime()?e:e-1}function T(t){m(1,arguments);var n=x(t),e=new Date(0);e.setUTCFullYear(n,0,4),e.setUTCHours(0,0,0,0);var a=w(e);return a}var j=6048e5,P={};function S(){return P}function L(t,n){var e,a,o,i,r,s,c,d;m(1,arguments);var l=S(),u=y(null!==(e=null!==(a=null!==(o=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(r=n.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==a?a:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==e?e:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=v(t),p=A.getUTCDay(),h=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-h),A.setUTCHours(0,0,0,0),A}function M(t,n){var e,a,o,i,r,s,c,d;m(1,arguments);var l=v(t),u=l.getUTCFullYear(),A=S(),p=y(null!==(e=null!==(a=null!==(o=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(r=n.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==a?a:null===(c=A.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==e?e:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,p),h.setUTCHours(0,0,0,0);var g=L(h,n),f=new Date(0);f.setUTCFullYear(u,0,p),f.setUTCHours(0,0,0,0);var b=L(f,n);return l.getTime()>=g.getTime()?u+1:l.getTime()>=b.getTime()?u:u-1}function D(t,n){var e,a,o,i,r,s,c,d;m(1,arguments);var l=S(),u=y(null!==(e=null!==(a=null!==(o=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(r=n.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==a?a:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==e?e:1),A=M(t,n),p=new Date(0);p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0);var h=L(p,n);return h}var U=6048e5;function I(t,n){for(var e=t<0?"-":"",a=Math.abs(t).toString();a.length<n;)a="0"+a;return e+a}const N=function(t,n){var e=t.getUTCFullYear(),a=e>0?e:1-e;return I("yy"===n?a%100:a,n.length)},W=function(t,n){var e=t.getUTCMonth();return"M"===n?String(e+1):I(e+1,2)},q=function(t,n){return I(t.getUTCDate(),n.length)},Y=function(t,n){return I(t.getUTCHours()%12||12,n.length)},z=function(t,n){return I(t.getUTCHours(),n.length)},O=function(t,n){return I(t.getUTCMinutes(),n.length)},G=function(t,n){return I(t.getUTCSeconds(),n.length)},H=function(t,n){var e=n.length,a=t.getUTCMilliseconds();return I(Math.floor(a*Math.pow(10,e-3)),n.length)};var F={G:function(t,n,e){var a=t.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(a,{width:"abbreviated"});case"GGGGG":return e.era(a,{width:"narrow"});default:return e.era(a,{width:"wide"})}},y:function(t,n,e){if("yo"===n){var a=t.getUTCFullYear(),o=a>0?a:1-a;return e.ordinalNumber(o,{unit:"year"})}return N(t,n)},Y:function(t,n,e,a){var o=M(t,a),i=o>0?o:1-o;return"YY"===n?I(i%100,2):"Yo"===n?e.ordinalNumber(i,{unit:"year"}):I(i,n.length)},R:function(t,n){return I(x(t),n.length)},u:function(t,n){return I(t.getUTCFullYear(),n.length)},Q:function(t,n,e){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(n){case"Q":return String(a);case"QQ":return I(a,2);case"Qo":return e.ordinalNumber(a,{unit:"quarter"});case"QQQ":return e.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(a,{width:"narrow",context:"formatting"});default:return e.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,n,e){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(n){case"q":return String(a);case"qq":return I(a,2);case"qo":return e.ordinalNumber(a,{unit:"quarter"});case"qqq":return e.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(a,{width:"narrow",context:"standalone"});default:return e.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,n,e){var a=t.getUTCMonth();switch(n){case"M":case"MM":return W(t,n);case"Mo":return e.ordinalNumber(a+1,{unit:"month"});case"MMM":return e.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(a,{width:"narrow",context:"formatting"});default:return e.month(a,{width:"wide",context:"formatting"})}},L:function(t,n,e){var a=t.getUTCMonth();switch(n){case"L":return String(a+1);case"LL":return I(a+1,2);case"Lo":return e.ordinalNumber(a+1,{unit:"month"});case"LLL":return e.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(a,{width:"narrow",context:"standalone"});default:return e.month(a,{width:"wide",context:"standalone"})}},w:function(t,n,e,a){var o=function(t,n){m(1,arguments);var e=v(t),a=L(e,n).getTime()-D(e,n).getTime();return Math.round(a/U)+1}(t,a);return"wo"===n?e.ordinalNumber(o,{unit:"week"}):I(o,n.length)},I:function(t,n,e){var a=function(t){m(1,arguments);var n=v(t),e=w(n).getTime()-T(n).getTime();return Math.round(e/j)+1}(t);return"Io"===n?e.ordinalNumber(a,{unit:"week"}):I(a,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getUTCDate(),{unit:"date"}):q(t,n)},D:function(t,n,e){var a=function(t){m(1,arguments);var n=v(t),e=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var a=n.getTime(),o=e-a;return Math.floor(o/B)+1}(t);return"Do"===n?e.ordinalNumber(a,{unit:"dayOfYear"}):I(a,n.length)},E:function(t,n,e){var a=t.getUTCDay();switch(n){case"E":case"EE":case"EEE":return e.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},e:function(t,n,e,a){var o=t.getUTCDay(),i=(o-a.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return I(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(t,n,e,a){var o=t.getUTCDay(),i=(o-a.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return I(i,n.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(t,n,e){var a=t.getUTCDay(),o=0===a?7:a;switch(n){case"i":return String(o);case"ii":return I(o,n.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},a:function(t,n,e){var a=t.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,n,e){var a,o=t.getUTCHours();switch(a=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,n,e){var a,o=t.getUTCHours();switch(a=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){var a=t.getUTCHours()%12;return 0===a&&(a=12),e.ordinalNumber(a,{unit:"hour"})}return Y(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getUTCHours(),{unit:"hour"}):z(t,n)},K:function(t,n,e){var a=t.getUTCHours()%12;return"Ko"===n?e.ordinalNumber(a,{unit:"hour"}):I(a,n.length)},k:function(t,n,e){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===n?e.ordinalNumber(a,{unit:"hour"}):I(a,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):O(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):G(t,n)},S:function(t,n){return H(t,n)},X:function(t,n,e,a){var o=(a._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return R(o);case"XXXX":case"XX":return Q(o);default:return Q(o,":")}},x:function(t,n,e,a){var o=(a._originalDate||t).getTimezoneOffset();switch(n){case"x":return R(o);case"xxxx":case"xx":return Q(o);default:return Q(o,":")}},O:function(t,n,e,a){var o=(a._originalDate||t).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+X(o,":");default:return"GMT"+Q(o,":")}},z:function(t,n,e,a){var o=(a._originalDate||t).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+X(o,":");default:return"GMT"+Q(o,":")}},t:function(t,n,e,a){var o=a._originalDate||t;return I(Math.floor(o.getTime()/1e3),n.length)},T:function(t,n,e,a){return I((a._originalDate||t).getTime(),n.length)}};function X(t,n){var e=t>0?"-":"+",a=Math.abs(t),o=Math.floor(a/60),i=a%60;if(0===i)return e+String(o);var r=n||"";return e+String(o)+r+I(i,2)}function R(t,n){return t%60==0?(t>0?"-":"+")+I(Math.abs(t)/60,2):Q(t,n)}function Q(t,n){var e=n||"",a=t>0?"-":"+",o=Math.abs(t);return a+I(Math.floor(o/60),2)+e+I(o%60,2)}const Z=F;var J=function(t,n){switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},$=function(t,n){switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const _={p:$,P:function(t,n){var e,a=t.match(/(P+)(p+)?/)||[],o=a[1],i=a[2];if(!i)return J(t,n);switch(o){case"P":e=n.dateTime({width:"short"});break;case"PP":e=n.dateTime({width:"medium"});break;case"PPP":e=n.dateTime({width:"long"});break;default:e=n.dateTime({width:"full"})}return e.replace("{{date}}",J(o,n)).replace("{{time}}",$(i,n))}};function V(t){var n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),t.getTime()-n.getTime()}var K=["D","DD"],tt=["YY","YYYY"];function nt(t){return-1!==K.indexOf(t)}function et(t){return-1!==tt.indexOf(t)}function at(t,n,e){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ot={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function it(t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.width?String(n.width):t.defaultWidth,a=t.formats[e]||t.formats[t.defaultWidth];return a}}const rt={date:it({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:it({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:it({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var st={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ct(t){return function(n,e){var a;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=null!=e&&e.width?String(e.width):o;a=t.formattingValues[i]||t.formattingValues[o]}else{var r=t.defaultWidth,s=null!=e&&e.width?String(e.width):t.defaultWidth;a=t.values[s]||t.values[r]}return a[t.argumentCallback?t.argumentCallback(n):n]}}const dt={ordinalNumber:function(t,n){var e=Number(t),a=e%100;if(a>20||a<10)switch(a%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:ct({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ct({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:ct({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ct({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ct({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function lt(t){return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=e.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=n.match(o);if(!i)return null;var r,s=i[0],c=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(c)?At(c,(function(t){return t.test(s)})):ut(c,(function(t){return t.test(s)}));r=t.valueCallback?t.valueCallback(d):d,r=e.valueCallback?e.valueCallback(r):r;var l=n.slice(s.length);return{value:r,rest:l}}}function ut(t,n){for(var e in t)if(t.hasOwnProperty(e)&&n(t[e]))return e}function At(t,n){for(var e=0;e<t.length;e++)if(n(t[e]))return e}var pt,ht={ordinalNumber:(pt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.match(pt.matchPattern);if(!e)return null;var a=e[0],o=t.match(pt.parsePattern);if(!o)return null;var i=pt.valueCallback?pt.valueCallback(o[0]):o[0];i=n.valueCallback?n.valueCallback(i):i;var r=t.slice(a.length);return{value:i,rest:r}}),era:lt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:lt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:lt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:lt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:lt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const mt={code:"en-US",formatDistance:function(t,n,e){var a,o=ot[t];return a="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+a:a+" ago":a},formatLong:rt,formatRelative:function(t,n,e,a){return st[t]},localize:dt,match:ht,options:{weekStartsOn:0,firstWeekContainsDate:1}};var gt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ft=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,bt=/^'([^]*?)'?$/,vt=/''/g,Et=/[a-zA-Z]/;function yt(t){var n=t.match(bt);return n?n[1].replace(vt,"'"):t}class Ct{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((n=>n.getName()===t))}contains(t){return this.tasks.some((n=>n.getName()===t))}addTask(t){this.tasks.find((n=>n.getName()===t.name))||this.tasks.push(t)}deleteTask(t){this.tasks=this.tasks.filter((n=>n.name!==t))}}class kt{constructor(t,n,e,a){this.name=t,this.dueDate=n,this.priority=e,this.description=a}setName(t){this.name=t}getName(){return this.name}setDate(t){this.dueDate=t}getDate(){return this.dueDate}setPriority(t){this.priority=t}getPriority(){return this.priority}setDescription(t){this.description=t}getDescription(){return this.description}}class Bt{constructor(){this.projects=[],this.projects.push(new Ct("Inbox")),this.projects.push(new Ct("Today")),this.projects.push(new Ct("This week"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((n=>n.getName()===t))}contains(t){return this.projects.some((n=>n.getName()===t))}addProject(t){this.projects.find((n=>n.name===t.name))||this.projects.push(t)}deleteProject(t){const n=this.projects.find((n=>n.getName()===t));this.projects.splice(this.projects.indexOf(n),1)}}class wt{static saveTodoList(t){localStorage.setItem("todoList",JSON.stringify(t))}static getTodoList(){const t=Object.assign(new Bt,JSON.parse(localStorage.getItem("todoList")));return t.setProjects(t.getProjects().map((t=>Object.assign(new Ct,t)))),t.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new kt,t)))))),console.log(t),t}static addProject(t){const n=wt.getTodoList();n.addProject(t),wt.saveTodoList(n)}static deleteProject(t){const n=wt.getTodoList();n.deleteProject(t),wt.saveTodoList(n)}static addTask(t,n){const e=wt.getTodoList();e.getProject(t).addTask(n),wt.saveTodoList(e)}static deleteTask(t,n){const e=wt.getTodoList();e.getProject(t).deleteTask(n),wt.saveTodoList(e)}static renameTask(t,n,e){const a=wt.getTodoList();a.getProject(t).getTask(n).setName(e),wt.saveTodoList(a)}static setTaskDate(t,n,e){const a=wt.getTodoList();console.log(a.getProject(t).getTask(n)),a.getProject(t).getTask(n).setDate(e),wt.saveTodoList(a)}static resetTaskLevel(t,n,e){const a=wt.getTodoList();console.log(a.getProject(t).getTask(n)),a.getProject(t).getTask(n).setPriority(e),wt.saveTodoList(a)}static renameDescription(t,n,e){const a=wt.getTodoList();a.getProject(t).getTask(n).setDescription(e),wt.saveTodoList(a)}}class xt{static loadHomepage(){xt.loadProjects(),xt.initProjectButtons()}static loadProjects(){wt.getTodoList().getProjects().forEach((t=>{"Inbox"!==t.name&&"Today"!==t.name&&"This week"!==t.name&&xt.createProject(t.name)})),xt.initAddProjectButtons()}static loadTasks(t){wt.getTodoList().getProject(t).getTasks().forEach((t=>xt.createTask(t.name,t.dueDate,t.priority,t.description))),"Today"!==t&&"This week"!==t&&xt.initAddTaskButtons()}static loadProjectContent(t){const n=document.getElementById("project-board");n.innerHTML=`\n        <h1 id="project-name">${t}</h1>\n        <div class="tasks-list" id="tasks-list"></div>`,"Today"!==t&&"This week"!==t&&(n.innerHTML+='\n        <button class="button-add-task" id="button-add-task">\n          <i class="fas fa-plus"></i>\n          Add Task\n        </button>\n\n        <div class="add-task-popup" id="add-task-popup">\n          <label for= "task-name">Task Name:</label>\n          <input class="input-add-task-popup" id="input-add-task-popup" type="text" placeholder= "Task Name"/>\n\n          <label for= "priority">Priority:</label>\n          \n          <select class="priority-select" name="priority" id= "priority" >\n            <option class= "low" value="low">Low</option>\n            <option class= "medium" value="medium">Medium</option>\n            <option class= "high" value="high">High</option>\n          </select>\n          \n\n          <label for= "description">Description:</label>\n        \n          <textarea name="description" id="description" cols="30" rows="6"></textarea>\n        \n          <div class="add-task-popup-buttons">\n            <button class="button-add-task-popup" id="button-add-task-popup">Add</button>\n            <button class="button-cancel-task-popup" id="button-cancel-task-popup">Cancel</button>\n          </div>\n        </div>'),xt.loadTasks(t),xt.initAddTaskButtons()}static createProject(t){document.getElementById("projects-list").innerHTML+=` \n      <button class="button-project" data-project-button>\n        <div class="left-project-panel">\n          <i class="fas fa-tasks"></i>\n          <span>${t}</span>\n        </div>\n        <div class="right-project-panel">\n          <i class="fas fa-times"></i>\n        </div>\n      </button>`,xt.initProjectButtons()}static createTask(t,n,e,a){document.getElementById("tasks-list").innerHTML+=`\n    <div class= "container">\n      <button class="button-task" data-task-button>\n        <div class="left-task-panel">\n          <i class="far fa-circle"></i>\n          <p class="task-content">${t}</p> \n          <input type="text" class="input-task-name" data-input-task-name>\n        </div>\n        <div class="middle-task-panel">\n          <p class="task-level">Priority:${e}</p>\n          <select class="priority" name="priority" id= "priority" >\n            <option class= "low" value="low">Low</option>\n            <option class= "medium" value="medium">Medium</option>\n            <option class= "high" value="high">High</option>\n          </select>\n        </div>\n        <div class="second-middle-task-panel">\n          <i class="fa fa-folder" aria-hidden="true"></i>\n        </div>\n        <div class="right-task-panel">\n          <p class="due-date" id="due-date">${n}</p>\n          <input type="date" class="input-due-date" data-input-due-date>\n          <i class="fas fa-times"></i>\n        </div>\n      </button>\n      <div class="description">\n        <div class= "description-content">${a}</div>\n        <i class="fa fa-pencil-square-o" aria-hidden="true"></i>\n        <input type="text" class="input-description" data-input-description>\n      </div>\n    </div>`,xt.initTaskButtons(),xt.initDescription()}static initDescription(){document.querySelectorAll(".description").forEach((t=>t.addEventListener("click",xt.handleDescription)))}static handleDescription(t){const n=this.children[0],e=this.children[0].innerHTML,a=this.children[2];t.target.classList.contains("fa-pencil-square-o")&&(this.children[0].classList.add("active"),this.children[1].classList.add("active"),this.children[2].classList.add("active")),t.target.classList.contains("input-description")||(console.log(n),console.log(e),console.log(a),this.children[2].value=e)}static renameDescription(t){if("Enter"!==t.key)return;const n=document.getElementById("project-name").textContent,e=this.parentElement.parentElement.children[0].children[0].children[1].textContent,a=this.parentElement.children[0].textContent,o=this.value;""!==o?(a===o&&alert("you are yet to change description"),console.log(o),console.log(a),wt.renameDescription(n,e,o),xt.clearTasks(),xt.loadTasks(n)):alert("description can't be empty")}static clearProjects(){document.getElementById("projects-list").textContent=""}static clearProjectBoard(){document.querySelector(".project-board").innerHTML=""}static clearTasks(){document.getElementById("tasks-list").textContent=""}static closeAllInputs(){document.querySelectorAll("[data-task-button]").forEach((t=>{xt.closeRenameInput(t),xt.closeSetDateInput(t),xt.closePrioritySelect(t),xt.closeDescription(t)}))}static initAddProjectButtons(){const t=document.getElementById("add-project-button"),n=document.getElementById("button-add-project-bar"),e=document.getElementById("button-cancel-project-bar"),a=document.getElementById("input-add-project-bar");t.addEventListener("click",xt.openAddProjectPopup),n.addEventListener("click",xt.addProject),e.addEventListener("click",xt.closeAddProjectPopup),a.addEventListener("keypress",xt.handleAddProjectPopupInput)}static openAddProjectPopup(){const t=document.getElementById("add-project-bar"),n=document.getElementById("add-project-button");t.classList.add("active"),n.classList.add("active"),xt.clearProjectBoard()}static closeAddProjectPopup(){const t=document.getElementById("add-project-bar"),n=document.getElementById("add-project-button"),e=document.getElementById("input-add-project-bar");t.classList.remove("active"),n.classList.remove("active"),e.value=""}static addProject(){const t=document.getElementById("input-add-project-bar"),n=t.value;if(""!==n){if(wt.getTodoList().contains(n))return t.value="",void alert("Project names must be different");wt.addProject(new Ct(n)),xt.createProject(n),xt.closeAddProjectPopup()}else alert("Project name can't be empty")}static handleAddProjectPopupInput(t){"Enter"===t.key&&xt.addProject()}static initProjectButtons(){document.querySelectorAll(".button-project").forEach((t=>t.addEventListener("click",xt.handleProjectButton)))}static deleteProject(t){wt.deleteProject(t),xt.clearProjects(),xt.loadProjects()}static handleProjectButton(t){const n=this.children[0].children[1].textContent;if(this.classList.contains("active")&&xt.clearProjectBoard(),t.target.classList.contains("fa-times"))return xt.deleteProject(n),void xt.clearProjectBoard();xt.openProject(n,this)}static openProject(t,n){[...document.querySelectorAll(".default-project-button"),...document.querySelectorAll(".button-project")].forEach((t=>t.classList.remove("active"))),n.classList.add("active"),xt.closeAddProjectPopup(),xt.loadProjectContent(t)}static initAddTaskButtons(){const t=document.getElementById("button-add-task"),n=document.getElementById("button-add-task-popup"),e=document.getElementById("button-cancel-task-popup");t.addEventListener("click",xt.openAddTaskPopup),n.addEventListener("click",xt.addTask),e.addEventListener("click",xt.closeAddTaskPopup)}static openAddTaskPopup(){const t=document.querySelector(".add-task-popup");document.querySelector(".button-add-task"),t.classList.add("active")}static closeAddTaskPopup(){const t=document.getElementById("add-task-popup"),n=document.getElementById("input-add-task-popup");document.getElementById("button-add-task"),t.classList.remove("active"),n.value=""}static addTask(){const t=document.getElementById("project-name").textContent,n=document.getElementById("input-add-task-popup").value,e=document.getElementById("priority").value,a=document.getElementById("description").value;if(""!==n){if(wt.getTodoList().getProject(t).contains(n))return alert("Task names must be different"),void(n.value="");wt.addTask(t,new kt(n,"No date",e,a)),xt.createTask(n,"No date",e,a),xt.closeAddTaskPopup()}else alert("Task name can't be empty")}static handleAddTaskPopupInput(t){"Enter"===t.key&&xt.addTask()}static initTaskButtons(){const t=document.querySelectorAll("[data-task-button]"),n=document.querySelectorAll("[data-input-task-name]"),e=document.querySelectorAll("select"),a=document.querySelectorAll("[data-input-due-date]"),o=document.querySelectorAll(".input-description");t.forEach((t=>t.addEventListener("click",xt.handleTaskButton))),n.forEach((t=>t.addEventListener("keypress",xt.renameTask))),e.forEach((t=>t.addEventListener("change",xt.resetTaskLevel))),a.forEach((t=>t.addEventListener("change",xt.setTaskDate))),o.forEach((t=>t.addEventListener("keypress",xt.renameDescription)))}static handleTaskButton(t){t.target.classList.contains("fa-times")&&(console.log(t.target),xt.deleteTask(this)),t.target.classList.contains("task-level")&&xt.openPrioritySelect(this),t.target.classList.contains("fa-folder")&&xt.openDescription(this),t.target.classList.contains("due-date")&&xt.openSetDateInput(this),t.target.classList.contains("task-content")&&xt.openRenameInput(this)}static openDescription(t){const n=t.parentElement.children[1];console.log(n),xt.closeAllInputs(),n.classList.add("active")}static closeDescription(t){t.parentElement.children[1].classList.remove("active")}static deleteTask(t){const n=document.getElementById("project-name").textContent,e=t.children[0].children[1].textContent;wt.deleteTask(n,e),xt.clearTasks(),xt.loadTasks(n)}static openSetDateInput(t){const n=t.children[3].children[0],e=t.children[3].children[1];xt.closeAllInputs(),n.classList.add("active"),e.classList.add("active")}static closeSetDateInput(t){const n=t.children[3].children[0],e=t.children[3].children[1];n.classList.remove("active"),e.classList.remove("active")}static setTaskDate(){const t=this.parentNode.parentNode,n=document.getElementById("project-name").textContent,e=t.children[0].children[1].textContent,a=function(t,n,e){var a,o,i,r,s,c,d,l,u,A,p,h,g,f,b,C,B,w;m(2,arguments);var x=String(n),T=S(),j=null!==(a=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:T.locale)&&void 0!==a?a:mt,P=y(null!==(i=null!==(r=null!==(s=null!==(c=null==e?void 0:e.firstWeekContainsDate)&&void 0!==c?c:null==e||null===(d=e.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:T.firstWeekContainsDate)&&void 0!==r?r:null===(u=T.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:1);if(!(P>=1&&P<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=y(null!==(p=null!==(h=null!==(g=null!==(f=null==e?void 0:e.weekStartsOn)&&void 0!==f?f:null==e||null===(b=e.locale)||void 0===b||null===(C=b.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==g?g:T.weekStartsOn)&&void 0!==h?h:null===(B=T.locale)||void 0===B||null===(w=B.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==p?p:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var M=v(t);if(!E(M))throw new RangeError("Invalid time value");var D=V(M),U=k(M,D),I={firstWeekContainsDate:P,weekStartsOn:L,locale:j,_originalDate:M},N=x.match(ft).map((function(t){var n=t[0];return"p"===n||"P"===n?(0,_[n])(t,j.formatLong):t})).join("").match(gt).map((function(a){if("''"===a)return"'";var o=a[0];if("'"===o)return yt(a);var i=Z[o];if(i)return null!=e&&e.useAdditionalWeekYearTokens||!et(a)||at(a,n,String(t)),null!=e&&e.useAdditionalDayOfYearTokens||!nt(a)||at(a,n,String(t)),i(U,a,j.localize,I);if(o.match(Et))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("");return N}(new Date(this.value),"dd/MM/yyyy");wt.setTaskDate(n,e,a),xt.clearTasks(),xt.loadTasks(n),xt.closeSetDateInput(t)}static openRenameInput(t){const n=t.children[0].children[1];let e=n.textContent;const a=t.children[0].children[2];t.parentNode.parentNode.children[0].textContent,xt.closeAllInputs(),n.classList.add("active"),a.classList.add("active"),a.value=e}static closeRenameInput(t){const n=t.children[0].children[1],e=t.children[0].children[2];n.classList.remove("active"),e.classList.remove("active"),e.value=""}static renameTask(t){if("Enter"!==t.key)return;const n=document.getElementById("project-name").textContent;console.log(n);const e=this.previousElementSibling.textContent,a=this.value;if(console.log(e),""!==a){if(wt.getTodoList().getProject(n).contains(a))return this.value="",void alert("Task names must be different");wt.renameTask(n,e,a),xt.clearTasks(),xt.loadTasks(n),xt.closeRenameInput(this.parentNode.parentNode)}else alert("Task name can't be empty")}static openPrioritySelect(t){const n=t.children[1].children[0],e=t.children[1].children[1];xt.closeAllInputs(),n.classList.add("active"),e.classList.add("active"),e.value=""}static closePrioritySelect(t){const n=t.children[1].children[0],e=t.children[1].children[1];n.classList.remove("active"),e.classList.remove("active")}static resetTaskLevel(t){const n=document.getElementById("project-name").textContent,e=this.parentNode.previousElementSibling.children[1].textContent,a=this.value;wt.resetTaskLevel(n,e,a),xt.clearTasks(),xt.loadTasks(n),xt.closePrioritySelect(this.parentNode.parentNode)}}document.addEventListener("DOMContentLoaded",xt.loadHomepage)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,